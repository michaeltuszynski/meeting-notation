services:
  backend:
    build: ./backend
    ports:
      - "9000:9000"
    environment:
      - PORT=9000
      - NODE_ENV=development
      - DEEPGRAM_API_KEY=${DEEPGRAM_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=meeting_intelligence
      - POSTGRES_USER=meeting_user
      - POSTGRES_PASSWORD=meeting_pass_2024
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - meeting-network
    restart: unless-stopped
    command: npm run dev

  frontend:
    build: ./frontend
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - REACT_APP_BACKEND_URL=http://localhost:9000
      - REACT_APP_WS_URL=ws://localhost:9000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - meeting-network
    restart: unless-stopped
    command: npm run dev  # This should run webpack --watch & node server.js

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - meeting-network
    restart: unless-stopped
  
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: meeting_intelligence
      POSTGRES_USER: meeting_user
      POSTGRES_PASSWORD: meeting_pass_2024
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/db/init:/docker-entrypoint-initdb.d
    networks:
      - meeting-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U meeting_user -d meeting_intelligence"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

networks:
  meeting-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data: